/* 
 * FIWARE-NGSI v2 Specification
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using ContextBrokerLibrary.Client;
using ContextBrokerLibrary.Model;
using IO.Swagger.Model;
using RestSharp;

namespace ContextBrokerLibrary.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAttributesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get attribute data
        /// </summary>
        /// <remarks>
        /// Returns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 200 OK. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Id of the entity</param>
        /// <param name="attrName">Name of the attribute to be retrieved.</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <param name="metadata">A list of metadata names to include in the response. See \&quot;Filtering out attributes and metadata\&quot; section for more detail. (optional)</param>
        /// <returns>GetAttributeDataResponse</returns>
        GetAttributeDataResponse GetAttributeData (string entityId, string attrName, string type = null, string metadata = null);

        /// <summary>
        /// Get attribute data
        /// </summary>
        /// <remarks>
        /// Returns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 200 OK. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Id of the entity</param>
        /// <param name="attrName">Name of the attribute to be retrieved.</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <param name="metadata">A list of metadata names to include in the response. See \&quot;Filtering out attributes and metadata\&quot; section for more detail. (optional)</param>
        /// <returns>ApiResponse of GetAttributeDataResponse</returns>
        ApiResponse<GetAttributeDataResponse> GetAttributeDataWithHttpInfo (string entityId, string attrName, string type = null, string metadata = null);
        /// <summary>
        /// Remove a Single Attribute
        /// </summary>
        /// <remarks>
        /// Removes an entity attribute. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Id of the entity.</param>
        /// <param name="attrName">Attribute name.</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <returns></returns>
        void RemoveASingleAttribute (string entityId, string attrName, string type = null);

        /// <summary>
        /// Remove a Single Attribute
        /// </summary>
        /// <remarks>
        /// Removes an entity attribute. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Id of the entity.</param>
        /// <param name="attrName">Attribute name.</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveASingleAttributeWithHttpInfo (string entityId, string attrName, string type = null);
        /// <summary>
        /// Update Attribute Data
        /// </summary>
        /// <remarks>
        /// The request payload is an object representing the new attribute data. Previous attribute data is replaced by the one in the request. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="contentType"></param>
        /// <param name="entityId">Id of the entity to update</param>
        /// <param name="attrName">Attribute name</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <returns></returns>
        void UpdateAttributeData (UpdateAttributeDataRequest body, string contentType, string entityId, string attrName, string type = null);

        /// <summary>
        /// Update Attribute Data
        /// </summary>
        /// <remarks>
        /// The request payload is an object representing the new attribute data. Previous attribute data is replaced by the one in the request. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="contentType"></param>
        /// <param name="entityId">Id of the entity to update</param>
        /// <param name="attrName">Attribute name</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateAttributeDataWithHttpInfo (UpdateAttributeDataRequest body, string contentType, string entityId, string attrName, string type = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get attribute data
        /// </summary>
        /// <remarks>
        /// Returns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 200 OK. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Id of the entity</param>
        /// <param name="attrName">Name of the attribute to be retrieved.</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <param name="metadata">A list of metadata names to include in the response. See \&quot;Filtering out attributes and metadata\&quot; section for more detail. (optional)</param>
        /// <returns>Task of GetAttributeDataResponse</returns>
        System.Threading.Tasks.Task<GetAttributeDataResponse> GetAttributeDataAsync (string entityId, string attrName, string type = null, string metadata = null);

        /// <summary>
        /// Get attribute data
        /// </summary>
        /// <remarks>
        /// Returns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 200 OK. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Id of the entity</param>
        /// <param name="attrName">Name of the attribute to be retrieved.</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <param name="metadata">A list of metadata names to include in the response. See \&quot;Filtering out attributes and metadata\&quot; section for more detail. (optional)</param>
        /// <returns>Task of ApiResponse (GetAttributeDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAttributeDataResponse>> GetAttributeDataAsyncWithHttpInfo (string entityId, string attrName, string type = null, string metadata = null);
        /// <summary>
        /// Remove a Single Attribute
        /// </summary>
        /// <remarks>
        /// Removes an entity attribute. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Id of the entity.</param>
        /// <param name="attrName">Attribute name.</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveASingleAttributeAsync (string entityId, string attrName, string type = null);

        /// <summary>
        /// Remove a Single Attribute
        /// </summary>
        /// <remarks>
        /// Removes an entity attribute. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Id of the entity.</param>
        /// <param name="attrName">Attribute name.</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveASingleAttributeAsyncWithHttpInfo (string entityId, string attrName, string type = null);
        /// <summary>
        /// Update Attribute Data
        /// </summary>
        /// <remarks>
        /// The request payload is an object representing the new attribute data. Previous attribute data is replaced by the one in the request. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="contentType"></param>
        /// <param name="entityId">Id of the entity to update</param>
        /// <param name="attrName">Attribute name</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAttributeDataAsync (UpdateAttributeDataRequest body, string contentType, string entityId, string attrName, string type = null);

        /// <summary>
        /// Update Attribute Data
        /// </summary>
        /// <remarks>
        /// The request payload is an object representing the new attribute data. Previous attribute data is replaced by the one in the request. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="contentType"></param>
        /// <param name="entityId">Id of the entity to update</param>
        /// <param name="attrName">Attribute name</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAttributeDataAsyncWithHttpInfo (UpdateAttributeDataRequest body, string contentType, string entityId, string attrName, string type = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AttributesApi : IAttributesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AttributesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AttributesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttributesApi"/> class
        /// </summary>
        /// <returns></returns>
        public AttributesApi()
        {
            this.Configuration = Configuration.Default;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AttributesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AttributesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get attribute data Returns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 200 OK. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Id of the entity</param>
        /// <param name="attrName">Name of the attribute to be retrieved.</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <param name="metadata">A list of metadata names to include in the response. See \&quot;Filtering out attributes and metadata\&quot; section for more detail. (optional)</param>
        /// <returns>GetAttributeDataResponse</returns>
        public GetAttributeDataResponse GetAttributeData (string entityId, string attrName, string type = null, string metadata = null)
        {
             ApiResponse<GetAttributeDataResponse> localVarResponse = GetAttributeDataWithHttpInfo(entityId, attrName, type, metadata);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get attribute data Returns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 200 OK. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Id of the entity</param>
        /// <param name="attrName">Name of the attribute to be retrieved.</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <param name="metadata">A list of metadata names to include in the response. See \&quot;Filtering out attributes and metadata\&quot; section for more detail. (optional)</param>
        /// <returns>ApiResponse of GetAttributeDataResponse</returns>
        public ApiResponse< GetAttributeDataResponse > GetAttributeDataWithHttpInfo (string entityId, string attrName, string type = null, string metadata = null)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new ApiException(400, "Missing required parameter 'entityId' when calling AttributesApi->GetAttributeData");
            // verify the required parameter 'attrName' is set
            if (attrName == null)
                throw new ApiException(400, "Missing required parameter 'attrName' when calling AttributesApi->GetAttributeData");

            var localVarPath = "/v2/entities/{entityId}/attrs/{attrName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityId != null) localVarPathParams.Add("entityId", this.Configuration.ApiClient.ParameterToString(entityId)); // path parameter
            if (attrName != null) localVarPathParams.Add("attrName", this.Configuration.ApiClient.ParameterToString(attrName)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (metadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata", metadata)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttributeData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAttributeDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAttributeDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAttributeDataResponse)));
        }

        /// <summary>
        /// Get attribute data Returns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 200 OK. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Id of the entity</param>
        /// <param name="attrName">Name of the attribute to be retrieved.</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <param name="metadata">A list of metadata names to include in the response. See \&quot;Filtering out attributes and metadata\&quot; section for more detail. (optional)</param>
        /// <returns>Task of GetAttributeDataResponse</returns>
        public async System.Threading.Tasks.Task<GetAttributeDataResponse> GetAttributeDataAsync (string entityId, string attrName, string type = null, string metadata = null)
        {
             ApiResponse<GetAttributeDataResponse> localVarResponse = await GetAttributeDataAsyncWithHttpInfo(entityId, attrName, type, metadata);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get attribute data Returns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 200 OK. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Id of the entity</param>
        /// <param name="attrName">Name of the attribute to be retrieved.</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <param name="metadata">A list of metadata names to include in the response. See \&quot;Filtering out attributes and metadata\&quot; section for more detail. (optional)</param>
        /// <returns>Task of ApiResponse (GetAttributeDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAttributeDataResponse>> GetAttributeDataAsyncWithHttpInfo (string entityId, string attrName, string type = null, string metadata = null)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new ApiException(400, "Missing required parameter 'entityId' when calling AttributesApi->GetAttributeData");
            // verify the required parameter 'attrName' is set
            if (attrName == null)
                throw new ApiException(400, "Missing required parameter 'attrName' when calling AttributesApi->GetAttributeData");

            var localVarPath = "/v2/entities/{entityId}/attrs/{attrName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityId != null) localVarPathParams.Add("entityId", this.Configuration.ApiClient.ParameterToString(entityId)); // path parameter
            if (attrName != null) localVarPathParams.Add("attrName", this.Configuration.ApiClient.ParameterToString(attrName)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (metadata != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metadata", metadata)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttributeData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAttributeDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetAttributeDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAttributeDataResponse)));
        }

        /// <summary>
        /// Remove a Single Attribute Removes an entity attribute. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Id of the entity.</param>
        /// <param name="attrName">Attribute name.</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <returns></returns>
        public void RemoveASingleAttribute (string entityId, string attrName, string type = null)
        {
             RemoveASingleAttributeWithHttpInfo(entityId, attrName, type);
        }

        /// <summary>
        /// Remove a Single Attribute Removes an entity attribute. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Id of the entity.</param>
        /// <param name="attrName">Attribute name.</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveASingleAttributeWithHttpInfo (string entityId, string attrName, string type = null)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new ApiException(400, "Missing required parameter 'entityId' when calling AttributesApi->RemoveASingleAttribute");
            // verify the required parameter 'attrName' is set
            if (attrName == null)
                throw new ApiException(400, "Missing required parameter 'attrName' when calling AttributesApi->RemoveASingleAttribute");

            var localVarPath = "/v2/entities/{entityId}/attrs/{attrName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityId != null) localVarPathParams.Add("entityId", this.Configuration.ApiClient.ParameterToString(entityId)); // path parameter
            if (attrName != null) localVarPathParams.Add("attrName", this.Configuration.ApiClient.ParameterToString(attrName)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveASingleAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove a Single Attribute Removes an entity attribute. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Id of the entity.</param>
        /// <param name="attrName">Attribute name.</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveASingleAttributeAsync (string entityId, string attrName, string type = null)
        {
             await RemoveASingleAttributeAsyncWithHttpInfo(entityId, attrName, type);

        }

        /// <summary>
        /// Remove a Single Attribute Removes an entity attribute. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId">Id of the entity.</param>
        /// <param name="attrName">Attribute name.</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveASingleAttributeAsyncWithHttpInfo (string entityId, string attrName, string type = null)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new ApiException(400, "Missing required parameter 'entityId' when calling AttributesApi->RemoveASingleAttribute");
            // verify the required parameter 'attrName' is set
            if (attrName == null)
                throw new ApiException(400, "Missing required parameter 'attrName' when calling AttributesApi->RemoveASingleAttribute");

            var localVarPath = "/v2/entities/{entityId}/attrs/{attrName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityId != null) localVarPathParams.Add("entityId", this.Configuration.ApiClient.ParameterToString(entityId)); // path parameter
            if (attrName != null) localVarPathParams.Add("attrName", this.Configuration.ApiClient.ParameterToString(attrName)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveASingleAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Attribute Data The request payload is an object representing the new attribute data. Previous attribute data is replaced by the one in the request. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="contentType"></param>
        /// <param name="entityId">Id of the entity to update</param>
        /// <param name="attrName">Attribute name</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <returns></returns>
        public void UpdateAttributeData (UpdateAttributeDataRequest body, string contentType, string entityId, string attrName, string type = null)
        {
             UpdateAttributeDataWithHttpInfo(body, contentType, entityId, attrName, type);
        }

        /// <summary>
        /// Update Attribute Data The request payload is an object representing the new attribute data. Previous attribute data is replaced by the one in the request. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="contentType"></param>
        /// <param name="entityId">Id of the entity to update</param>
        /// <param name="attrName">Attribute name</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateAttributeDataWithHttpInfo (UpdateAttributeDataRequest body, string contentType, string entityId, string attrName, string type = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AttributesApi->UpdateAttributeData");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AttributesApi->UpdateAttributeData");
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new ApiException(400, "Missing required parameter 'entityId' when calling AttributesApi->UpdateAttributeData");
            // verify the required parameter 'attrName' is set
            if (attrName == null)
                throw new ApiException(400, "Missing required parameter 'attrName' when calling AttributesApi->UpdateAttributeData");

            var localVarPath = "/v2/entities/{entityId}/attrs/{attrName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityId != null) localVarPathParams.Add("entityId", this.Configuration.ApiClient.ParameterToString(entityId)); // path parameter
            if (attrName != null) localVarPathParams.Add("attrName", this.Configuration.ApiClient.ParameterToString(attrName)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttributeData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update Attribute Data The request payload is an object representing the new attribute data. Previous attribute data is replaced by the one in the request. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="contentType"></param>
        /// <param name="entityId">Id of the entity to update</param>
        /// <param name="attrName">Attribute name</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAttributeDataAsync (UpdateAttributeDataRequest body, string contentType, string entityId, string attrName, string type = null)
        {
             await UpdateAttributeDataAsyncWithHttpInfo(body, contentType, entityId, attrName, type);

        }

        /// <summary>
        /// Update Attribute Data The request payload is an object representing the new attribute data. Previous attribute data is replaced by the one in the request. The object follows the JSON representation for attributes (described in \&quot;JSON Attribute Representation\&quot; section). Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="contentType"></param>
        /// <param name="entityId">Id of the entity to update</param>
        /// <param name="attrName">Attribute name</param>
        /// <param name="type">Entity type, to avoid ambiguity in case there are several entities with the same entity id. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAttributeDataAsyncWithHttpInfo (UpdateAttributeDataRequest body, string contentType, string entityId, string attrName, string type = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AttributesApi->UpdateAttributeData");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AttributesApi->UpdateAttributeData");
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new ApiException(400, "Missing required parameter 'entityId' when calling AttributesApi->UpdateAttributeData");
            // verify the required parameter 'attrName' is set
            if (attrName == null)
                throw new ApiException(400, "Missing required parameter 'attrName' when calling AttributesApi->UpdateAttributeData");

            var localVarPath = "/v2/entities/{entityId}/attrs/{attrName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entityId != null) localVarPathParams.Add("entityId", this.Configuration.ApiClient.ParameterToString(entityId)); // path parameter
            if (attrName != null) localVarPathParams.Add("attrName", this.Configuration.ApiClient.ParameterToString(attrName)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttributeData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
