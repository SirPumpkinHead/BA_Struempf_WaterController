/* 
 * FIWARE-NGSI v2 Specification
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace ContextBrokerLibrary.Model
{
    /// <summary>
    /// QueryRequest
    /// </summary>
    [DataContract]
    public partial class QueryRequest : IEquatable<QueryRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryRequest" /> class.
        /// </summary>
        /// <param name="entities">entities (required).</param>
        /// <param name="attrs">attrs (required).</param>
        /// <param name="expression">expression (required).</param>
        /// <param name="metadata">metadata (required).</param>
        public QueryRequest(List<Object> entities = default(List<Object>), List<string> attrs = default(List<string>),
            Object expression = default(Object), List<string> metadata = default(List<string>))
        {
            // to ensure "entities" is required (not null)
            if (entities == null)
            {
                throw new InvalidDataException("entities is a required property for QueryRequest and cannot be null");
            }
            else
            {
                this.Entities = entities;
            }

            // to ensure "attrs" is required (not null)
            if (attrs == null)
            {
                throw new InvalidDataException("attrs is a required property for QueryRequest and cannot be null");
            }
            else
            {
                this.Attrs = attrs;
            }

            // to ensure "expression" is required (not null)
            if (expression == null)
            {
                throw new InvalidDataException("expression is a required property for QueryRequest and cannot be null");
            }
            else
            {
                this.Expression = expression;
            }

            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new InvalidDataException("metadata is a required property for QueryRequest and cannot be null");
            }
            else
            {
                this.Metadata = metadata;
            }
        }

        /// <summary>
        /// Gets or Sets Entities
        /// </summary>
        [DataMember(Name = "entities", EmitDefaultValue = false)]
        public List<Object> Entities { get; set; }

        /// <summary>
        /// Gets or Sets Attrs
        /// </summary>
        [DataMember(Name = "attrs", EmitDefaultValue = false)]
        public List<string> Attrs { get; set; }

        /// <summary>
        /// Gets or Sets Expression
        /// </summary>
        [DataMember(Name = "expression", EmitDefaultValue = false)]
        public Object Expression { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public List<string> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryRequest {\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("  Attrs: ").Append(Attrs).Append("\n");
            sb.Append("  Expression: ").Append(Expression).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryRequest);
        }

        /// <summary>
        /// Returns true if QueryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Entities == input.Entities ||
                    this.Entities != null &&
                    input.Entities != null &&
                    this.Entities.SequenceEqual(input.Entities)
                ) &&
                (
                    this.Attrs == input.Attrs ||
                    this.Attrs != null &&
                    input.Attrs != null &&
                    this.Attrs.SequenceEqual(input.Attrs)
                ) &&
                (
                    this.Expression == input.Expression ||
                    (this.Expression != null &&
                     this.Expression.Equals(input.Expression))
                ) &&
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Entities != null)
                    hashCode = hashCode * 59 + this.Entities.GetHashCode();
                if (this.Attrs != null)
                    hashCode = hashCode * 59 + this.Attrs.GetHashCode();
                if (this.Expression != null)
                    hashCode = hashCode * 59 + this.Expression.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}