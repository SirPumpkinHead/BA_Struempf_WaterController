/* 
 * FIWARE-NGSI v2 Specification
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace ContextBrokerLibrary.Model
{
    /// <summary>
    /// UpdateRequest
    /// </summary>
    [DataContract]
    public partial class UpdateRequest : IEquatable<UpdateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateRequest" /> class.
        /// </summary>
        /// <param name="actionType">actionType (required).</param>
        /// <param name="entities">entities (required).</param>
        public UpdateRequest(string actionType = default(string), List<Object> entities = default(List<Object>))
        {
            // to ensure "actionType" is required (not null)
            if (actionType == null)
            {
                throw new InvalidDataException(
                    "actionType is a required property for UpdateRequest and cannot be null");
            }
            else
            {
                this.ActionType = actionType;
            }

            // to ensure "entities" is required (not null)
            if (entities == null)
            {
                throw new InvalidDataException("entities is a required property for UpdateRequest and cannot be null");
            }
            else
            {
                this.Entities = entities;
            }
        }

        /// <summary>
        /// Gets or Sets ActionType
        /// </summary>
        [DataMember(Name = "actionType", EmitDefaultValue = false)]
        public string ActionType { get; set; }

        /// <summary>
        /// Gets or Sets Entities
        /// </summary>
        [DataMember(Name = "entities", EmitDefaultValue = false)]
        public List<Object> Entities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateRequest {\n");
            sb.Append("  ActionType: ").Append(ActionType).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateRequest);
        }

        /// <summary>
        /// Returns true if UpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ActionType == input.ActionType ||
                    (this.ActionType != null &&
                     this.ActionType.Equals(input.ActionType))
                ) &&
                (
                    this.Entities == input.Entities ||
                    this.Entities != null &&
                    input.Entities != null &&
                    this.Entities.SequenceEqual(input.Entities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActionType != null)
                    hashCode = hashCode * 59 + this.ActionType.GetHashCode();
                if (this.Entities != null)
                    hashCode = hashCode * 59 + this.Entities.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}