/* 
 * FIWARE-NGSI v2 Specification
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace ContextBrokerLibrary.Model
{
    /// <summary>
    /// RetrieveEntityTypeResponse
    /// </summary>
    [DataContract]
    public partial class RetrieveEntityTypeResponse : IEquatable<RetrieveEntityTypeResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetrieveEntityTypeResponse" /> class.
        /// </summary>
        /// <param name="attrs">attrs (required).</param>
        /// <param name="count">count (required).</param>
        public RetrieveEntityTypeResponse(Object attrs = default(Object), int? count = default(int?))
        {
            // to ensure "attrs" is required (not null)
            if (attrs == null)
            {
                throw new InvalidDataException(
                    "attrs is a required property for RetrieveEntityTypeResponse and cannot be null");
            }
            else
            {
                this.Attrs = attrs;
            }

            // to ensure "count" is required (not null)
            if (count == null)
            {
                throw new InvalidDataException(
                    "count is a required property for RetrieveEntityTypeResponse and cannot be null");
            }
            else
            {
                this.Count = count;
            }
        }

        /// <summary>
        /// Gets or Sets Attrs
        /// </summary>
        [DataMember(Name = "attrs", EmitDefaultValue = false)]
        public Object Attrs { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public int? Count { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetrieveEntityTypeResponse {\n");
            sb.Append("  Attrs: ").Append(Attrs).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RetrieveEntityTypeResponse);
        }

        /// <summary>
        /// Returns true if RetrieveEntityTypeResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RetrieveEntityTypeResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetrieveEntityTypeResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Attrs == input.Attrs ||
                    (this.Attrs != null &&
                     this.Attrs.Equals(input.Attrs))
                ) &&
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                     this.Count.Equals(input.Count))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attrs != null)
                    hashCode = hashCode * 59 + this.Attrs.GetHashCode();
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}