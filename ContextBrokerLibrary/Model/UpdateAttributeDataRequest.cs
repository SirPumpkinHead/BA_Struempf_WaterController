/* 
 * FIWARE-NGSI v2 Specification
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace ContextBrokerLibrary.Model
{
    /// <summary>
    /// UpdateAttributeDataRequest
    /// </summary>
    [DataContract]
    public partial class UpdateAttributeDataRequest : IEquatable<UpdateAttributeDataRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAttributeDataRequest" /> class.
        /// </summary>
        /// <param name="value">value (required).</param>
        /// <param name="metadata">metadata (required).</param>
        public UpdateAttributeDataRequest(double? value = default(double?), Object metadata = default(Object))
        {
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException(
                    "value is a required property for UpdateAttributeDataRequest and cannot be null");
            }
            else
            {
                this.Value = value;
            }

            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new InvalidDataException(
                    "metadata is a required property for UpdateAttributeDataRequest and cannot be null");
            }
            else
            {
                this.Metadata = metadata;
            }
        }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public double? Value { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateAttributeDataRequest {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateAttributeDataRequest);
        }

        /// <summary>
        /// Returns true if UpdateAttributeDataRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateAttributeDataRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateAttributeDataRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                     this.Value.Equals(input.Value))
                ) &&
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                     this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}