/* 
 * FIWARE-NGSI v2 Specification
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace ContextBrokerLibrary.Model
{
    /// <summary>
    /// CreateRegistrationRequest
    /// </summary>
    [DataContract]
    public partial class CreateRegistrationRequest : IEquatable<CreateRegistrationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRegistrationRequest" /> class.
        /// </summary>
        /// <param name="description">description (required).</param>
        /// <param name="dataProvided">dataProvided (required).</param>
        /// <param name="provider">provider (required).</param>
        public CreateRegistrationRequest(string description = default(string), Object dataProvided = default(Object),
            Object provider = default(Object))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException(
                    "description is a required property for CreateRegistrationRequest and cannot be null");
            }
            else
            {
                this.Description = description;
            }

            // to ensure "dataProvided" is required (not null)
            if (dataProvided == null)
            {
                throw new InvalidDataException(
                    "dataProvided is a required property for CreateRegistrationRequest and cannot be null");
            }
            else
            {
                this.DataProvided = dataProvided;
            }

            // to ensure "provider" is required (not null)
            if (provider == null)
            {
                throw new InvalidDataException(
                    "provider is a required property for CreateRegistrationRequest and cannot be null");
            }
            else
            {
                this.Provider = provider;
            }
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DataProvided
        /// </summary>
        [DataMember(Name = "dataProvided", EmitDefaultValue = false)]
        public Object DataProvided { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name = "provider", EmitDefaultValue = false)]
        public Object Provider { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateRegistrationRequest {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DataProvided: ").Append(DataProvided).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateRegistrationRequest);
        }

        /// <summary>
        /// Returns true if CreateRegistrationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateRegistrationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateRegistrationRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                     this.Description.Equals(input.Description))
                ) &&
                (
                    this.DataProvided == input.DataProvided ||
                    (this.DataProvided != null &&
                     this.DataProvided.Equals(input.DataProvided))
                ) &&
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                     this.Provider.Equals(input.Provider))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DataProvided != null)
                    hashCode = hashCode * 59 + this.DataProvided.GetHashCode();
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}