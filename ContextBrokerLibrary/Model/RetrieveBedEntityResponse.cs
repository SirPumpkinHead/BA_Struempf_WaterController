/* 
 * FIWARE-NGSI v2 Specification
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace ContextBrokerLibrary.Model
{
    /// <summary>
    /// RetrieveEntityResponse
    /// </summary>
    [DataContract]
    public class RetrieveBedEntityResponse : IEquatable<RetrieveBedEntityResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetrieveBedEntityResponse" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="temperature">temperature (required).</param>
        /// <param name="humidity">humidity (required).</param>
        /// <param name="location">location (required).</param>
        public RetrieveBedEntityResponse(string type = default, string id = default,
            Object temperature = default, Object humidity = default, Object location = default)
        {
            // to ensure "type" is required (not null)

            Type = type ?? throw new InvalidDataException(
                "type is a required property for RetrieveEntityResponse and cannot be null");

            // to ensure "id" is required (not null)

            Id = id ?? throw new InvalidDataException(
                "id is a required property for RetrieveEntityResponse and cannot be null");
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        [DataMember(Name = "name", EmitDefaultValue = false)]
        public Text Name { get; set; }

        [DataMember(Name ="expRainVolume1h", EmitDefaultValue = true)]
        public Number ExpRainVolume1H { get; set; }

        [JsonProperty("expRainVolume2h")]
        public Number ExpRainVolume2H { get; set; }

        [JsonProperty("expRainVolume4h")]
        public Number ExpRainVolume4H { get; set; }

        [JsonProperty("expRainVolume8h")]
        public Number ExpRainVolume8H { get; set; }

        [JsonProperty("expRainVolume16h")]
        public Number ExpRainVolume16H { get; set; }

        [JsonProperty("expRainVolume1d")]
        public Number ExpRainVolume1D { get; set; }

        [JsonProperty("expRainVolume2d")]
        public Number ExpRainVolume2D { get; set; }

        [JsonProperty("expRainVolume3d")]
        public Number ExpRainVolume3D { get; set; }

        [JsonProperty("expRainVolume4d")]
        public Number ExpRainVolume4D { get; set; }

        [JsonProperty("expRainVolume5d")]
        public Number ExpRainVolume5D { get; set; }

        [JsonProperty("expRainVolume6d")]
        public Number ExpRainVolume6D { get; set; }

        [JsonProperty("expRainVolume7d")]
        public Number ExpRainVolume7D { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetrieveEntityResponse {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RetrieveBedEntityResponse);
        }

        /// <summary>
        /// Returns true if RetrieveEntityResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RetrieveEntityResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetrieveBedEntityResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                     this.Type.Equals(input.Type))
                ) &&
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                     this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}