/* 
 * FIWARE-NGSI v2 Specification
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace ContextBrokerLibrary.Model
{
    /// <summary>
    /// UpdateRegistrationRequest
    /// </summary>
    [DataContract]
    public partial class UpdateRegistrationRequest : IEquatable<UpdateRegistrationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateRegistrationRequest" /> class.
        /// </summary>
        /// <param name="expires">expires (required).</param>
        public UpdateRegistrationRequest(string expires = default(string))
        {
            // to ensure "expires" is required (not null)
            if (expires == null)
            {
                throw new InvalidDataException(
                    "expires is a required property for UpdateRegistrationRequest and cannot be null");
            }
            else
            {
                this.Expires = expires;
            }
        }

        /// <summary>
        /// Gets or Sets Expires
        /// </summary>
        [DataMember(Name = "expires", EmitDefaultValue = false)]
        public string Expires { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateRegistrationRequest {\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateRegistrationRequest);
        }

        /// <summary>
        /// Returns true if UpdateRegistrationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateRegistrationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateRegistrationRequest input)
        {
            if (input == null)
                return false;

            return
            (
                this.Expires == input.Expires ||
                (this.Expires != null &&
                 this.Expires.Equals(input.Expires))
            );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Expires != null)
                    hashCode = hashCode * 59 + this.Expires.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}